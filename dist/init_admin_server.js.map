{"version":3,"sources":["../src/init_admin_server.js"],"names":[],"mappings":";;;;;;;;;;;;sBAAc,QAAQ;;;;sCACO,2BAA2B;;;;8BAC9B,kBAAkB;;;;0BACtB,cAAc;;;;qBAGrB,UAAC,IAAiD,EAAE,MAAM,EAAK;MAA5D,MAAM,GAAR,IAAiD,CAA/C,MAAM;MAAE,YAAY,GAAtB,IAAiD,CAAvC,YAAY;MAAE,eAAe,GAAvC,IAAiD,CAAzB,eAAe;MAAE,MAAM,GAA/C,IAAiD,CAAR,MAAM;;AAC7D,MAAM,SAAS,GAAG,6BAAU,MAAM,CAAC,CAAC;MAC5B,WAAW,GAAK,MAAM,CAAtB,WAAW;;AAEnB,MAAM,iBAAiB,GAAG,SAApB,iBAAiB,CAAI,IAAI,EAAK;4CACH,oCAAiB,eAAe,CAAC,IAAI,CAAC;;QAA7D,IAAI,qCAAJ,IAAI;QAAE,IAAI,qCAAJ,IAAI;QAAE,MAAM,qCAAN,MAAM;4BACM,WAAW,CAAC,IAAI,CAAC;QAAzC,UAAU,qBAAV,UAAU;QAAE,OAAO,qBAAP,OAAO;;;AAG3B,UAAM,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,WAAW,CAAC,KAAK,EAAE,OAAO,EAAE;AACxD,UAAI,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE;;AAEhC,YAAM,MAAM,GAAG,oBAAE,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG,CACjC,UAAA,CAAC;iBAAI,oBAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SAAA,CAC3B,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC;iBAAM,CAAC;SAAA,CAAC,CAC3B,KAAK,EAAE,CAAC;AACT,eAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACpB,YAAM,WAAW,gBACZ,OAAO;AACV,gBAAM,EAAN,MAAM;UACP,CAAC;AACF,cAAM,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;AAC9D,eAAO,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;OAC5C;KACF,CAAC,CAAC;AACH,UAAM,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,WAAW,CAAC,GAAG,EAAE;AAC7C,UAAI,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE;AAChC,eAAO,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;OAC7B;KACF,CAAC,CAAC;GACJ,CAAC;AACF,MAAM,kBAAkB,GAAG,SAArB,kBAAkB,GAAS;AAC/B,iBAAY,WAAW,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;GACrD,CAAC;AACF,oBAAkB,EAAE,CAAC;AACrB,mCAAc,EAAE,MAAM,EAAN,MAAM,EAAE,YAAY,EAAZ,YAAY,EAAE,eAAe,EAAf,eAAe,EAAE,EAAE,MAAM,CAAC,CAAC;CAClE","file":"init_admin_server.js","sourcesContent":["import _ from 'lodash';\nimport publicationUtils from './utils/publication_utils';\nimport createMethods from './create_methods';\nimport IsAllowed from './is_allowed';\n\n\nexport default ({ Meteor, SimpleSchema, ValidatedMethod, Counts }, config) => {\n  const isAllowed = IsAllowed(config);\n  const { collections } = config;\n\n  const createPublication = (name) => {\n    const { list, edit, counts } = publicationUtils.getPublications(name);\n    const { collection, columns } = collections[name];\n\n    /* eslint meteor/audit-argument-checks: 0*/\n    Meteor.publish(list, function publishList(query, options) {\n      if (isAllowed(name, this.userId)) {\n        // only restrict to first, because emails.0.address does not work\n        const fields = _.chain(columns).map(\n          c => _.first(c.split('.')),\n        ).keyBy().mapValues(() => 1)\n        .value();\n        console.log(fields);\n        const findOptions = {\n          ...options,\n          fields,\n        };\n        Counts.publish(this, counts, collection.find(query, options));\n        return collection.find(query, findOptions);\n      }\n    });\n    Meteor.publish(edit, function publishEdit(_id) {\n      if (isAllowed(name, this.userId)) {\n        return collection.find(_id);\n      }\n    });\n  };\n  const createPublications = () => {\n    Object.keys(collections).forEach(createPublication);\n  };\n  createPublications();\n  createMethods({ Meteor, SimpleSchema, ValidatedMethod }, config);\n};\n"]}